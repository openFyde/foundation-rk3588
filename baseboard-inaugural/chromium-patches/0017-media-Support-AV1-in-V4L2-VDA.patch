Index: src/media/gpu/v4l2/v4l2_vda_helpers.cc
===================================================================
--- src.orig/media/gpu/v4l2/v4l2_vda_helpers.cc
+++ src/media/gpu/v4l2/v4l2_vda_helpers.cc
@@ -162,6 +162,9 @@ InputBufferFragmentSplitter::CreateFromP
     case VideoCodec::kVP9:
       // VP8/VP9 don't need any frame splitting, use the default implementation.
       return std::make_unique<v4l2_vda_helpers::InputBufferFragmentSplitter>();
+    case VideoCodec::kAV1:
+      // Depends on downstream frame splitting, use the default implementation
+      return std::make_unique<v4l2_vda_helpers::InputBufferFragmentSplitter>();
     default:
       LOG(ERROR) << "Unhandled profile: " << profile;
       return nullptr;
Index: src/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc
===================================================================
--- src.orig/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc
+++ src/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc
@@ -761,6 +761,7 @@ bool V4L2StatefulVideoDecoderBackend::Is
 #endif  // BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER)
       V4L2_PIX_FMT_VP8,
       V4L2_PIX_FMT_VP9,
+      V4L2_PIX_FMT_AV1,
     };
     auto device = base::MakeRefCounted<V4L2Device>();
     VideoDecodeAccelerator::SupportedProfiles profiles =
Index: src/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.cc
===================================================================
--- src.orig/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.cc
+++ src/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.cc
@@ -91,6 +91,7 @@ static const std::vector<uint32_t> kSupp
     V4L2_PIX_FMT_VP8,
     V4L2_PIX_FMT_VP9,
     V4L2_PIX_FMT_HEVC,
+    V4L2_PIX_FMT_AV1,
 };
 
 // static
