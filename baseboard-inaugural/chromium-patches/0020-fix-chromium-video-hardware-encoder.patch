Index: src/media/gpu/v4l2/v4l2_video_encode_accelerator.cc
===================================================================
--- src.orig/media/gpu/v4l2/v4l2_video_encode_accelerator.cc
+++ src/media/gpu/v4l2/v4l2_video_encode_accelerator.cc
@@ -193,23 +193,27 @@ V4L2VideoEncodeAccelerator::~V4L2VideoEn
 }
 
 bool V4L2VideoEncodeAccelerator::Initialize(
-    const Config& config,
+    const Config& pre_config,
     Client* client,
     std::unique_ptr<MediaLog> media_log) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(child_sequence_checker_);
   DCHECK_EQ(encoder_state_, kUninitialized);
+  Config config = pre_config;
 
   TRACE_EVENT0("media,gpu", "V4L2VEA::Initialize");
-  VLOGF(2) << ": " << config.AsHumanReadableString();
+  if (config.output_profile == VIDEO_CODEC_PROFILE_UNKNOWN)
+    config.output_profile = H264PROFILE_MAIN;
 
   if (!can_use_encoder_) {
     MEDIA_LOG(ERROR, media_log.get()) << "Too many encoders are allocated";
+    VLOGF(2) << "can_use_encoder_: " << can_use_encoder_;
     return false;
   }
 
   if (config.HasSpatialLayer()) {
     MEDIA_LOG(ERROR, media_log.get())
         << "Spatial layer encoding is not yet supported";
+    VLOGF(2) << "Spatial layer encoding is not yet supported";
     return false;
   }
 
@@ -249,6 +253,7 @@ bool V4L2VideoEncodeAccelerator::Initial
   if (output_format_fourcc_ == V4L2_PIX_FMT_INVALID) {
     MEDIA_LOG(ERROR, media_log.get())
         << "invalid output_profile=" << GetProfileName(config.output_profile);
+    VLOGF(2) << "invalid output_profile=" <<  GetProfileName(config.output_profile);
     return false;
   }
 
@@ -257,6 +262,9 @@ bool V4L2VideoEncodeAccelerator::Initial
         << "Failed to open device for profile="
         << GetProfileName(config.output_profile)
         << ", fourcc=" << FourccToString(output_format_fourcc_);
+    VLOGF(2) << "Failed to open device for profile="
+             << GetProfileName(config.output_profile)
+             << ", fourcc=" << FourccToString(output_format_fourcc_);
     return false;
   }
 
@@ -273,6 +281,9 @@ bool V4L2VideoEncodeAccelerator::Initial
         << "Unsupported resolution: " << config.input_visible_size.ToString()
         << ", min=" << min_resolution.ToString()
         << ", max=" << max_resolution.ToString();
+    VLOGF(2) << "Unsupported resolution: " << config.input_visible_size.ToString()
+             << ", min=" << min_resolution.ToString()
+             << ", max=" << max_resolution.ToString();
     return false;
   }
 
@@ -290,12 +301,14 @@ bool V4L2VideoEncodeAccelerator::Initial
   if (device_->Ioctl(VIDIOC_QUERYCAP, &caps) != 0) {
     MEDIA_LOG(ERROR, media_log.get())
         << "ioctl() failed: VIDIOC_QUERYCAP, errno=" << errno;
+    VLOGF(2) << "ioctl() failed: VIDIOC_QUERYCAP, errno=" << errno;
     return false;
   }
 
   if ((caps.capabilities & kCapsRequired) != kCapsRequired) {
     MEDIA_LOG(ERROR, media_log.get())
         << "caps check failed: 0x" << std::hex << caps.capabilities;
+    VLOGF(2) << "caps check failed: 0x" << std::hex << caps.capabilities;
     return false;
   }
 
