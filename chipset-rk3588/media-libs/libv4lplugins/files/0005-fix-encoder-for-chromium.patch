Index: libv4l-rkmpp/src/libv4l-rkmpp-enc.c
===================================================================
--- libv4l-rkmpp.orig/src/libv4l-rkmpp-enc.c
+++ libv4l-rkmpp/src/libv4l-rkmpp-enc.c
@@ -37,6 +37,13 @@ enum v4l2_mpeg_video_bitrate_mode {
 #define RKMPP_ENC_POLL_TIMEOUT_MS	100
 
 static struct rkmpp_fmt rkmpp_enc_fmts[] = {
+  {
+    .name = "4:2:0 1 plane Y/CbCr",
+    .fourcc = V4L2_PIX_FMT_NV12,
+    .num_planes = 1,
+    .type = MPP_VIDEO_CodingNone,
+    .depth = { 12 },
+  },
 	{
 		.name = "4:2:0 3 plane Y/Cb/Cr",
 		.fourcc = V4L2_PIX_FMT_YUV420M,
@@ -77,10 +84,10 @@ static struct rkmpp_fmt rkmpp_enc_fmts[]
 		.format = MPP_FMT_BUTT,
 		.frmsize = {
 			.min_width = 96,
-			.max_width = 1920,
+			.max_width = 3840,
 			.step_width = RKMPP_MB_DIM,
 			.min_height = 96,
-			.max_height = 1088,
+			.max_height = 2160,
 			.step_height = RKMPP_MB_DIM,
 		},
 	},
@@ -95,7 +102,7 @@ static struct rkmpp_fmt rkmpp_enc_fmts[]
 			.max_width = 1920,
 			.step_width = RKMPP_MB_DIM,
 			.min_height = 96,
-			.max_height = 1088,
+			.max_height = 1080,
 			.step_height = RKMPP_MB_DIM,
 		},
 	},
@@ -113,7 +120,22 @@ static struct rkmpp_fmt rkmpp_enc_fmts[]
 			.max_height = 1088,
 			.step_height = RKMPP_MB_DIM,
 		}
-	}
+	},
+  {
+    .name = "H.265",
+    .fourcc = V4L2_PIX_FMT_HEVC,
+    .num_planes = 1,
+    .type = MPP_VIDEO_CodingHEVC,
+    .format = MPP_FMT_BUTT,
+    .frmsize = {
+      .min_width = 96,
+      .max_width = 3840,
+      .step_width = RKMPP_MB_DIM,
+      .min_height = 96,
+      .max_height = 2160,
+      .step_height = RKMPP_MB_DIM,
+    },
+  },
 };
 
 static int rkmpp_enc_apply_rc_cfg(struct rkmpp_enc_context *enc);
@@ -891,6 +913,48 @@ static int rkmpp_enc_s_parm(struct rkmpp
 	return 0;
 }
 
+static int rkmmp_enc_querymenu(struct rkmpp_enc_context *enc,
+             struct v4l2_querymenu *query_menu)
+{
+  struct rkmpp_context *ctx = enc->ctx;
+  ENTER();
+  switch(query_menu->id) {
+  case V4L2_CID_MPEG_VIDEO_BITRATE_MODE:
+    if (enc->mb_rc) {
+      if (enc->rc_reaction_coeff < 10)
+        query_menu->index = V4L2_MPEG_VIDEO_BITRATE_MODE_CBR;
+      else
+        query_menu->index = V4L2_MPEG_VIDEO_BITRATE_MODE_VBR;
+    } else {
+      query_menu->index = V4L2_MPEG_VIDEO_BITRATE_MODE_CBR;
+    }
+    break;
+  case V4L2_CID_MPEG_VIDEO_H264_PROFILE: {
+    static int support_h264_profiles[] = {
+    	V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE,
+    	V4L2_MPEG_VIDEO_H264_PROFILE_MAIN,
+    	V4L2_MPEG_VIDEO_H264_PROFILE_HIGH,
+  	};
+    int index = query_menu->index;
+    if (index >= 0 && index < 3 /*sizeof support_h264_profiles */) {
+      query_menu->index = support_h264_profiles[query_menu->index];
+    }else{
+      LOGV(1, "unsupported menu: %x index:%d\n", query_menu->id, index);
+      query_menu->index = V4L2_MPEG_VIDEO_H264_PROFILE_HIGH;
+    }
+    break;
+  }
+  case V4L2_CID_MPEG_VIDEO_HEVC_PROFILE:
+    query_menu->index = V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN;
+    break;
+  default:
+    LOGV(1, "unsupported menu: %x\n", query_menu->id);
+    RETURN_ERR(EINVAL, -1);
+  }
+  LEAVE();
+  return 0;
+}
+
 static int rkmpp_enc_queryctrl(struct rkmpp_enc_context *enc,
 			       struct v4l2_queryctrl *query_ctrl)
 {
@@ -913,6 +977,10 @@ static int rkmpp_enc_queryctrl(struct rk
 		query_ctrl->minimum = V4L2_MPEG_VIDEO_VP8_PROFILE_0;
 		query_ctrl->maximum = query_ctrl->minimum;
 		break;
+  case V4L2_CID_MPEG_VIDEO_HEVC_PROFILE:
+    query_ctrl->minimum = V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN;
+    query_ctrl->maximum = V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE;
+    break;
 		/* TODO: fill info for other supported ctrls */
 	default:
 		LOGV(1, "unsupported ctrl: %x\n", query_ctrl->id);
